package application;

import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONObject;

import javafx.application.Platform;
import javafx.event.ActionEvent;

import javafx.scene.control.ScrollPane;

public class ChatroomLayoutController {
	@FXML
	private Button btnBrowsing;
	@FXML
	private TextField tfEnterMessage;
	@FXML
	private ScrollPane messagePane;
	
	private Stage stage;
	private ChatroomLayoutModel model;
	private VBox vbox = new VBox();

	@FXML
	public void handleBtnBrowsing(ActionEvent event) {
		// TODO Autogenerated
	}

	@FXML
	public void handleEnterMessage(ActionEvent event) {
		if (!tfEnterMessage.getText().trim().isEmpty()) {
			String messageToServer = tfEnterMessage.getText().trim().toString();
			Label labelMessage = new Label(messageToServer);
			Label labelTime = new Label(getDateTime());
			labelMessage.setFont(new Font(20));
			labelTime.setFont(new Font(10));

			// Vbox always align to left, add hbox to align right
			HBox hboxMessage = new HBox();
			hboxMessage.setAlignment(Pos.CENTER_RIGHT);
			hboxMessage.getChildren().add(labelMessage);
			HBox hboxTime = new HBox();
			hboxTime.setAlignment(Pos.CENTER_RIGHT);
			hboxTime.getChildren().add(labelTime);

			vbox.getChildren().add(hboxMessage);
			vbox.getChildren().add(hboxTime);
			tfEnterMessage.clear();

			Map<String, String> map = new HashMap<String, String>();
			map.put("message", messageToServer);
			map.put("nowTime", getDateTime());
			JSONObject jsonObject = new JSONObject(map);
			model.sendServer(jsonObject);
		}
	}
	public void setScroll() {
		// Avoid the blocking scorll bar
		vbox.prefWidthProperty().bind(stage.widthProperty().subtract(40));
		messagePane.setContent(vbox);
		// ScrollPane auto scroll
		messagePane.vvalueProperty().bind(vbox.heightProperty());
	}
	public void updateLabelLater(final String text1, int size1, final String text2, int size2) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				Label label1 = new Label(text1);
				Label label2 = new Label(text2);
				label1.setFont(new Font(size1));
				label2.setFont(new Font(size2));

				vbox.getChildren().add(label1);
				vbox.getChildren().add(label2);
			}
		});
	}

	public String getDateTime() {
		SimpleDateFormat sdFormat = new SimpleDateFormat("MM/dd hh:mm");
		Date date = new Date();
		String strDate = sdFormat.format(date);
		return strDate;
	}

	public void setStage(Stage stage) {
        this.stage = stage;
    }
	public void setModel(ChatroomLayoutModel model) {
		this.model = model;
	}
}
